// Generated by CoffeeScript 1.6.2
"use strict";
var urequire,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

urequire = require('urequire');

module.exports = function(grunt) {
  var _;

  _ = grunt.util._;
  return grunt.registerMultiTask("urequire", "Convert javascript modules using uRequire", function() {
    /* DEPRECATED OLD FORMAT CONFIG
    */

    var bb, configParams, dataDone, done, gatherDeriveConfigs, _ref;

    if ((this.target === 'options') && (_.any(grunt.config.get("urequire"), function(val, key) {
      return __indexOf.call(urequire.Build.templates, key) >= 0;
    }))) {
      return grunt.log.writeln("You are using a *deprecated* grunt-urequire format in your gruntfile.\nShould still work, but you should change it to uRequire/grunt-urequire\nversion v0.3 and above.\n\nIgnoring bogus 'options' task.");
    } else {
      if ((_ref = this.target, __indexOf.call(urequire.Build.templates, _ref) >= 0) && grunt.config.get("urequire.options")) {
        this.data = _.clone(this.data, true);
        _.extend(this.data, grunt.config.get("urequire.options"));
        this.data.template = this.target;
        grunt.log.writeln("You are using a *deprecated* grunt-urequire format in your gruntfile.\nShould still work, but you should change it to uRequire/grunt-urequire\nversion v0.3 and above.\n\nTransformed @data is:\n" + (JSON.stringify(this.data, null, ' ')));
      }
      /* The 'real' grunt-urequire task
      */

      if (this.target[0] !== '_') {
        done = this.async();
        this.data.done = dataDone = (function(taskName) {
          return function(doneVal) {
            if (doneVal === true) {
              grunt.log.ok("grunt-urequire task '" + taskName + "' is done(:-)");
            } else {
              grunt.log.error("grunt-urequire task '" + taskName + "' has errors ):-(");
            }
            return done(doneVal);
          };
        })(this.target);
        configParams = [];
        gatherDeriveConfigs = function(config) {
          var cfgObject, drv, _i, _len, _ref1, _results;

          if (_.isObject(config)) {
            configParams.push(config);
            if (config.derive) {
              if (!_.isArray(config.derive)) {
                config.derive = [config.derive];
              }
              _ref1 = config.derive;
              _results = [];
              for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                drv = _ref1[_i];
                if (cfgObject = grunt.config.get("urequire." + drv)) {
                  _results.push(gatherDeriveConfigs(cfgObject));
                } else {
                  grunt.log.error("derive '" + drv + "' not found in grunt's config, while processing derive array ['" + (config.derive.join("', '")) + "']");
                  _results.push(dataDone(false));
                }
              }
              return _results;
            }
          }
        };
        gatherDeriveConfigs(this.data);
        if (_.isUndefined(this.data.derive)) {
          gatherDeriveConfigs({
            derive: '_defaults'
          });
        }
        configParams.push({
          bundle: {
            bundleName: this.target
          }
        });
        configParams.unshift(null);
        bb = new (Function.prototype.bind.apply(urequire.BundleBuilder, configParams));
        return bb.buildBundle();
      }
    }
  });
};

